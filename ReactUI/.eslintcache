[{"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\index.js":"1","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\App.js":"2","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\reportWebVitals.js":"3","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Quiz.js":"4","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Menu.js":"5","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\define.js":"6","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\controller.js":"7","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Result.js":"8"},{"size":674,"mtime":1618389324090,"results":"9","hashOfConfig":"10"},{"size":1961,"mtime":1620356490640,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1610542129298,"results":"12","hashOfConfig":"10"},{"size":7948,"mtime":1620376165291,"results":"13","hashOfConfig":"10"},{"size":9880,"mtime":1620140126596,"results":"14","hashOfConfig":"10"},{"size":103,"mtime":1620309127469,"results":"15","hashOfConfig":"10"},{"size":3787,"mtime":1620377792394,"results":"16","hashOfConfig":"10"},{"size":2061,"mtime":1620378089425,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"14yao00",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\index.js",[],["36","37"],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\App.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\reportWebVitals.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Quiz.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Menu.js",["38"],"import React, { useState } from \"react\";\r\nimport { Container, Row, Col, Form, Button, Modal, Spinner, ThemeProvider } from \"react-bootstrap\";\r\nimport { instanceOf } from 'prop-types';\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport { BsPower } from 'react-icons/bs';\r\n\r\nvar DEF = require(\"./define\");\r\nvar Controller = require(\"./controller\");\r\n\r\nfunction Login(props) {\r\n  const [pass, setPass] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  var isWrong = props.triedLogin && !props.isLogin;\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={!props.isLogin}\r\n        onHide={() => { }}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Login</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Row className=\"ml-2 mb-3\">ログインしろよ（笑）</Row>\r\n\r\n            {/* ユーザー名 */}\r\n            <Form.Group as={Row} controlId=\"formPlaintextUserId\">\r\n              <Form.Label column sm=\"2\">\r\n                User ID\r\n              </Form.Label>\r\n              <Col sm=\"10\">\r\n                <Form.Control type=\"text\" placeholder=\"Password\" onChange={(e) => { setName(e.target.value) }} />\r\n              </Col>\r\n            </Form.Group>\r\n\r\n            {/* パスワード */}\r\n            <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n              <Form.Label column sm=\"2\">\r\n                Password\r\n              </Form.Label>\r\n              <Col sm=\"10\">\r\n                <Form.Control type=\"password\" placeholder=\"Password\" onChange={(e) => { setPass(e.target.value) }} isInvalid={isWrong} />\r\n                {isWrong && <Form.Control.Feedback type=\"invalid\">間違っとるよ（笑）</Form.Control.Feedback>}\r\n              </Col>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={(e) => props.checkLogin(pass, name)}>OK</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>);\r\n}\r\n\r\nclass Menu extends React.Component {\r\n  static propTypes = {\r\n    cookies: instanceOf(Cookies).isRequired\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { cookies } = props;\r\n\r\n    var isLogin = cookies.get('isLogin');\r\n    if (isLogin === \"false\") {\r\n      isLogin = false;\r\n    } else if (isLogin === \"true\") {\r\n      isLogin = true;\r\n    } else {\r\n      isLogin = false;\r\n    }\r\n\r\n    this.state = {\r\n      // ログインしているか\r\n      isLogin: isLogin,\r\n      // 一度ログインOKボタンが押されたか\r\n      triedLogin: false,\r\n      // 全カテゴリリスト\r\n      categories: [],\r\n      // 選択カテゴリリスト\r\n      selectCategories: [],\r\n      // 全レーティングリスト\r\n      ratings: [],\r\n      // 選択レーティングリスト\r\n      selectRatings: [],\r\n      // 対象問題数\r\n      targetCount: 0,\r\n      // 出題数\r\n      quesNumber: 0,\r\n      // クイズ読み込み中\r\n      loadingQuiz: false,\r\n      // 途中データ進捗\r\n      progressNumber: 0,\r\n      // 途中データ問題数\r\n      progressCount: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    Controller.getCategoryList().then(data => {\r\n      this.setState({ categories: data, selectCategories: data });\r\n    });\r\n\r\n    Controller.getRatingList().then(data => {\r\n      this.setState({ ratings: data, selectRatings: data });\r\n    });\r\n\r\n    Controller.getProgress().then(data => {\r\n      this.setState({ progressNumber: data.number, progressCount: data.count });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (JSON.stringify(this.state.selectCategories) !== JSON.stringify(prevState.selectCategories) || JSON.stringify(this.state.selectRatings) !== JSON.stringify(prevState.selectRatings)) {\r\n      Controller.getQuizCount(this.state.selectCategories, this.state.selectRatings).then(data => {\r\n        this.setState({ targetCount: data, quesNumber: data });\r\n      });\r\n    }\r\n  }\r\n\r\n  checkLogin(pass, userId) {\r\n    const { cookies } = this.props;\r\n\r\n    var res = pass === \"wara\";\r\n    this.setState({\r\n      isLogin: res,\r\n      triedLogin: true\r\n    });\r\n\r\n    cookies.set('isLogin', res);\r\n    if (res) cookies.set('userId', userId);\r\n  }\r\n\r\n  logout() {\r\n    const { cookies } = this.props;\r\n    this.setState({\r\n      isLogin: false,\r\n      triedLogin: false\r\n    });\r\n    cookies.set('isLogin', false);\r\n    cookies.set('userId', '');\r\n  }\r\n\r\n  categoryChange(id) {\r\n    var selectCategories = this.state.selectCategories;\r\n\r\n    if (selectCategories.includes(id)) {\r\n      selectCategories = selectCategories.filter(n => n !== id).sort();\r\n    } else {\r\n      selectCategories = selectCategories.concat(); // 変更差分が検知できないのでコピーする\r\n      selectCategories.push(id);\r\n    }\r\n\r\n    this.setState({ selectCategories: selectCategories });\r\n  }\r\n\r\n  categoryChangeAll() {\r\n    var selectCategories = this.state.selectCategories;\r\n\r\n    if (selectCategories.length === this.state.categories.length) {\r\n      selectCategories = [];\r\n    } else {\r\n      selectCategories = this.state.categories.concat();\r\n    }\r\n\r\n    this.setState({ selectCategories: selectCategories });\r\n  }\r\n\r\n  ratingChange(id) {\r\n    var selectRatings = this.state.selectRatings;\r\n\r\n    if (selectRatings.includes(Number(id))) {\r\n      selectRatings = selectRatings.filter(n => n !== Number(id)).sort();\r\n    } else {\r\n      selectRatings = selectRatings.concat();\r\n      selectRatings.push(Number(id));\r\n    }\r\n\r\n    this.setState({ selectRatings: selectRatings });\r\n  }\r\n\r\n  ratingChangeAll() {\r\n    var selectRatings = this.state.selectRatings;\r\n\r\n    if (selectRatings.length === this.state.ratings.length) {\r\n      selectRatings = [];\r\n    } else {\r\n      selectRatings = this.state.ratings.concat();\r\n    }\r\n\r\n    this.setState({ selectRatings: selectRatings });\r\n  }\r\n\r\n  startQuiz() {\r\n    this.setState({ loadingQuiz: true });\r\n    Controller.startQuiz(this.state.selectCategories, this.state.selectRatings, this.state.quesNumber).then(data => {\r\n      this.setState({ loadingQuiz: false });\r\n      this.props.changeMode(DEF.APP_MODE.QUIZ);\r\n    });\r\n  }\r\n\r\n  restartQuiz() {\r\n    this.props.changeMode(DEF.APP_MODE.QUIZ);\r\n  }\r\n\r\n  render() {\r\n    const { cookies } = this.props;\r\n\r\n    var startButtontext;\r\n    if (this.state.loadingQuiz) {\r\n      startButtontext = <div><Spinner\r\n        as=\"span\"\r\n        animation=\"grow\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n      />\r\n      読み込み中</div>;\r\n    } else {\r\n      startButtontext = <div>開始</div>;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <h1>メニュー</h1> ユーザー名: {cookies.get('userId')} <Button variant=\"link\" onClick={(e) => this.logout()}>{' '}<BsPower />ログアウト</Button>\r\n\r\n        <Login isLogin={this.state.isLogin} triedLogin={this.state.triedLogin} checkLogin={(pass, name) => this.checkLogin(pass, name)} />\r\n\r\n        {/* カテゴリ */}\r\n        <Form className=\"border border-dark rounded\">\r\n          <Form.Group as={Row} controlId=\"category\" mb={3} className=\"mt-3 mx-3\">\r\n            <Form.Label column sm={3}>\r\n              カテゴリ\r\n            </Form.Label>\r\n            <Col>\r\n              <Button variant=\"outline-primary\" size=\"sm\" onClick={e => this.categoryChangeAll()}>\r\n                すべて切り替え\r\n              </Button>\r\n            </Col>\r\n            <Col sm=\"10\">\r\n              <Row>\r\n                {\r\n                  this.state.categories.map((category) =>\r\n                    <Form.Check inline label={category} type=\"checkbox\" id={category} onChange={(e) => this.categoryChange(e.target.id)} checked={this.state.selectCategories.includes(category)} />\r\n                  )\r\n                }\r\n              </Row>\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          {/* レーティング */}\r\n          <Form.Group as={Row} controlId=\"rating\" mb={3} className=\"mt-3 mx-3\">\r\n            <Form.Label column sm={3}>\r\n              レーティング\r\n              </Form.Label>\r\n            <Col>\r\n              <Button variant=\"outline-primary\" size=\"sm\" onClick={e => this.ratingChangeAll()}>\r\n                すべて切り替え\r\n                </Button>\r\n            </Col>\r\n            <Col sm=\"10\">\r\n              <Row>\r\n                {\r\n                  this.state.ratings.map((rating) =>\r\n                    <Form.Check inline label={\"☆\".repeat(rating)} type=\"checkbox\" id={rating} onChange={(e) => this.ratingChange(e.target.id)} checked={this.state.selectRatings.includes(rating)} />\r\n                  )\r\n                }\r\n              </Row>\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Row} controlId=\"NumberOfQuestions\" mb={3} className=\"mt-3 mx-3\">\r\n            <Form.Label column sm=\"2\">\r\n              出題数 <br />\r\n              (対象問題数: {this.state.targetCount})\r\n            </Form.Label>\r\n            <Col sm=\"5\">\r\n              <Form.Control type=\"number\" max={this.state.targetCount} min={0} step={10} value={this.state.quesNumber} onChange={(e) => this.setState({ quesNumber: Number(e.target.value) })} />\r\n            </Col>\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        <Row className=\"d-grid gap-2 col-6 mx-auto mt-3\" mb={3}>\r\n          <Button variant=\"primary\" size=\"lg\" block onClick={(e) => this.startQuiz()} disabled={this.state.quesNumber <= 0}>\r\n            {startButtontext}\r\n          </Button>\r\n        </Row>\r\n\r\n        <hr />\r\n\r\n        {\r\n          this.state.progressNumber > 0 &&\r\n          <Button variant=\"info\" size=\"lg\" block onClick={(e) => this.restartQuiz()} >\r\n            再開({this.state.progressNumber}/{this.state.progressCount})\r\n          </Button>\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withCookies(Menu);","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\define.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\controller.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Result.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":2,"column":61,"nodeType":"45","messageId":"46","endLine":2,"endColumn":74},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]