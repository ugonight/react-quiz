[{"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\index.js":"1","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\App.js":"2","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\reportWebVitals.js":"3","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Quiz.js":"4","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Menu.js":"5","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\define.js":"6","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\controller.js":"7"},{"size":674,"mtime":1618389324090,"results":"8","hashOfConfig":"9"},{"size":1860,"mtime":1619187704621,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610542129298,"results":"11","hashOfConfig":"9"},{"size":7513,"mtime":1619443696948,"results":"12","hashOfConfig":"9"},{"size":9095,"mtime":1619444346399,"results":"13","hashOfConfig":"9"},{"size":87,"mtime":1617980639992,"results":"14","hashOfConfig":"9"},{"size":2672,"mtime":1619322898390,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"14yao00",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\index.js",[],["32","33"],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\App.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\reportWebVitals.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Quiz.js",["34"],"import React from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  Container,\r\n  ToggleButtonGroup,\r\n  ToggleButton,\r\n  Button,\r\n  Alert,\r\n  Collapse,\r\n  InputGroup,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\n\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\r\nimport { vs } from 'react-syntax-highlighter/dist/esm/styles/prism'\r\nconst gfm = require('remark-gfm');\r\n\r\nvar DEF = require(\"./define\");\r\nvar Controller = require(\"./controller\");\r\n\r\nconst md_components = {\r\n  code({ node, className, ...props }) {\r\n    const match = /language-(\\w+)/.exec(className || '')\r\n    return match\r\n      ? <SyntaxHighlighter language={match[1]} PreTag=\"div\" style={vs} {...props} />\r\n      : <code className={className} {...props} />\r\n  }\r\n}\r\n\r\nfunction Question(props) {\r\n  return (\r\n    <div className=\"question\">\r\n      <ReactMarkdown remarkPlugins={[gfm]} components={md_components} className=\"line-break\">\r\n        {props.value}\r\n      </ReactMarkdown>\r\n    </div>);\r\n}\r\n\r\nfunction Choices(props) {\r\n  const choiceList = props.choices;\r\n\r\n  return (\r\n    <ToggleButtonGroup\r\n      type={props.type}\r\n      name=\"options\"\r\n      vertical\r\n      className=\"choices\"\r\n      value={props.input}\r\n      onChange={props.onChange}\r\n    >\r\n      {choiceList.map((choice, idx) => {\r\n        var variant = \"outline-dark\";\r\n        // 回答後ならボタンの色を変える\r\n        if (props.isAnswered) {\r\n          var correct = false, select = false;\r\n\r\n          // 一択\r\n          if (props.type === \"radio\") {\r\n            correct = (idx === props.answer);\r\n            select = (idx === props.input);\r\n\r\n            // 正解・選択\r\n            if (correct && select) {\r\n              variant = \"success\";\r\n            }\r\n            // 正解・未選択\r\n            else if (correct) {\r\n              variant = \"warning\";\r\n            }\r\n            // 不正解・選択\r\n            else if (select) {\r\n              variant = \"danger\";\r\n            }\r\n          }\r\n          // 複数回答\r\n          else if (props.type === \"checkbox\") {\r\n            correct = (props.answer.includes(idx));\r\n            select = (props.input.includes(idx));\r\n\r\n            // 正解・選択\r\n            if (correct && select) {\r\n              variant = \"success\";\r\n            }\r\n            // 正解・未選択\r\n            else if (correct) {\r\n              variant = \"warning\";\r\n            }\r\n            // 不正解・選択\r\n            else if (select) {\r\n              variant = \"danger\";\r\n            }\r\n          }\r\n        }\r\n\r\n        return (\r\n          <ToggleButton\r\n            key={idx}\r\n            variant={variant}\r\n            className=\"choice mt-2\"\r\n            name=\"radio\"\r\n            value={idx}\r\n            disabled={props.isAnswered}\r\n          >\r\n            {choice}\r\n          </ToggleButton>\r\n        );\r\n      })}\r\n    </ToggleButtonGroup>\r\n  );\r\n}\r\n\r\nfunction TextBox(props) {\r\n  var isWrong = props.isAnswered && props.input !== props.answer;\r\n\r\n  return (\r\n    <InputGroup className=\"mb-3\">\r\n      <InputGroup.Prepend>\r\n        <InputGroup.Text id=\"inputGroup-sizing-default\">回答</InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n\r\n      <FormControl\r\n        aria-label=\"Default\"\r\n        aria-describedby=\"inputGroup-sizing-default\"\r\n        onChange={(i) => props.onChange(i.target.value)}\r\n        readOnly={props.isAnswered}\r\n        isInvalid={isWrong}\r\n        isValid={props.isAnswered && !isWrong}\r\n      />\r\n      {isWrong && <FormControl.Feedback type=\"invalid\">\r\n        {\"答え: \" + props.answer}\r\n      </FormControl.Feedback>}\r\n\r\n    </InputGroup>\r\n  );\r\n}\r\n\r\nfunction UserInput(props) {\r\n  var inputEl = <div />;\r\n\r\n  var choices = props.question.choices;\r\n  var onChange = props.onChange;\r\n  var isAnswered = props.state.isAnswered;\r\n  var input = props.state.input;\r\n  var answer = props.question.answer;\r\n  var type = props.question.type;\r\n\r\n  if (type === \"radio\" || type === \"checkbox\") {\r\n    inputEl = (\r\n      <Choices\r\n        choices={choices}\r\n        onChange={onChange}\r\n        isAnswered={isAnswered}\r\n        input={input}\r\n        answer={answer}\r\n        type={type}\r\n      />\r\n    );\r\n  } else if (type === \"text\") {\r\n    inputEl = (\r\n      <TextBox\r\n        onChange={onChange}\r\n        isAnswered={isAnswered}\r\n        input={input}\r\n        answer={answer}\r\n        type={type}\r\n      />\r\n    );\r\n  }\r\n\r\n  return inputEl;\r\n}\r\n\r\nfunction Result(props) {\r\n  var variant = props.isCorrect ? \"success\" : \"danger\";\r\n  var headMsg = props.isCorrect ? \"正解！\" : \"不正解！ｗ\";\r\n\r\n  return (\r\n    <>\r\n      <Alert variant={variant} show={props.show} transition={Collapse}>\r\n        <Alert.Heading>{headMsg}</Alert.Heading>\r\n        <hr />\r\n        <p className=\"mb-0\">\r\n          <ReactMarkdown remarkPlugins={[gfm]} components={md_components} className=\"line-break\">\r\n            {props.comment}\r\n          </ReactMarkdown>\r\n        </p>\r\n      </Alert>\r\n    </>\r\n  );\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: null,\r\n      isAnswered: false,\r\n      isCorrect: false,\r\n      quesNumber: 0,\r\n      question: {\r\n        \"sentence\": \"\",\r\n        \"type\": \"\",\r\n        \"choices\": \"\",\r\n        \"answer\": 0,\r\n        \"comment\": \"\"\r\n      },\r\n      // クイズ読み込み中\r\n      loadingQuiz: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    Controller.getCurrentQuestion().then(data => {\r\n      this.setState({ question: data.question, quesNumber: data.quesNumber });\r\n    });\r\n  }\r\n\r\n  changeInput(i) {\r\n    var input = i;\r\n\r\n    // 配列はソートする\r\n    if (Array.isArray(input)) {\r\n      input.sort();\r\n    }\r\n\r\n    this.setState({\r\n      input: input\r\n    });\r\n  }\r\n\r\n  clickOK(e) {\r\n    if (!this.state.isAnswered) {\r\n      // 答え合わせ\r\n      this.setState({\r\n        isAnswered: true,\r\n        isCorrect:\r\n          JSON.stringify(this.state.input) ===\r\n          JSON.stringify(this.state.question.answer)\r\n      });\r\n    } else {\r\n      // 次の問題へ\r\n      this.setState({ loadingQuiz: true });\r\n      Controller.applyResult(this.state.isCorrect).then(data => {\r\n        Controller.getCurrentQuestion().then(data => {\r\n          this.setState({\r\n            question: data.question,\r\n            quesNumber: data.quesNumber,\r\n            input: null,\r\n            isAnswered: false,\r\n            loadingQuiz: false\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 className=\"header\">{this.state.quesNumber + 1}問目</h1>\r\n\r\n        <Question value={this.state.question.sentence} />\r\n\r\n        <UserInput\r\n          onChange={(i) => this.changeInput(i)}\r\n          state={this.state}\r\n          question={this.state.question}\r\n        />\r\n\r\n        <Result\r\n          isCorrect={this.state.isCorrect}\r\n          comment={this.state.question.comment}\r\n          show={this.state.isAnswered}\r\n        />\r\n\r\n        <Button\r\n          variant=\"primary\"\r\n          size=\"lg\"\r\n          block\r\n          className=\"mt-4\"\r\n          onClick={(i) => this.clickOK(i)}\r\n          disabled={this.state.input == null || this.state.loadingQuiz}\r\n        >\r\n          {this.state.isAnswered ? ( this.state.loadingQuiz ? \"読み込み中…\" : \"次へ\") : \"決定\"}\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Quiz() {\r\n  return (\r\n    <Container>\r\n      <Game />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\Menu.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\define.js",[],"D:\\programs\\test\\react-tutorial\\react-quiz\\ReactUI\\src\\controller.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":19,"column":5,"nodeType":"41","messageId":"42","endLine":19,"endColumn":8},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'DEF' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]