{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Question","props","className","value","Choices","choiceList","choices","ToggleButtonGroup","type","name","vertical","input","onChange","map","choice","idx","variant","isAnswered","answer","includes","ToggleButton","disabled","TextBox","InputGroup","Prepend","Text","id","FormControl","aria-label","aria-describedby","i","target","UserInput","inputEl","question","state","Result","isCorrect","headMsg","Alert","show","transition","Collapse","Heading","commentary","Game","questionNum","file_json","require","questions","Array","isArray","sort","this","setState","e","length","JSON","stringify","section","sentence","changeInput","Button","size","block","onClick","clickOK","React","Component","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49839509.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  Container,\n  ToggleButtonGroup,\n  ToggleButton,\n  Button,\n  Alert,\n  Collapse,\n  InputGroup,\n  FormControl\n} from \"react-bootstrap\";\n\nfunction Question(props) {\n  return <div className=\"question\">{props.value}</div>;\n}\n\nfunction Choices(props) {\n  const choiceList = props.choices;\n\n  return (\n    <ToggleButtonGroup\n      type={props.type}\n      name=\"options\"\n      vertical\n      className=\"choices\"\n      value={props.input}\n      onChange={props.onChange}\n    >\n      {choiceList.map((choice, idx) => {\n        var variant = \"outline-dark\";\n        // 回答後ならボタンの色を変える\n        if (props.isAnswered) {\n          if (props.type === \"radio\") {\n            if (idx === props.answer) {\n              variant = \"success\";\n            } else if (idx === props.input) {\n              variant = \"danger\";\n            }\n          } else if (props.type === \"checkbox\") {\n            if (props.answer.includes(idx)) {\n              variant = \"success\";\n            } else if (props.input.includes(idx)) {\n              variant = \"danger\";\n            }\n          }\n        }\n\n        return (\n          <ToggleButton\n            key={idx}\n            variant={variant}\n            className=\"choice mt-2\"\n            name=\"radio\"\n            value={idx}\n            disabled={props.isAnswered}\n          >\n            {choice}\n          </ToggleButton>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n}\n\nfunction TextBox(props) {\n  return (\n    <InputGroup className=\"mb-3\">\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"inputGroup-sizing-default\">回答</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl\n        aria-label=\"Default\"\n        aria-describedby=\"inputGroup-sizing-default\"\n        onChange={(i) => props.onChange(i.target.value)}\n      />\n    </InputGroup>\n  );\n}\n\nfunction UserInput(props) {\n  var inputEl;\n\n  var choices = props.question.choices;\n  var onChange = props.onChange;\n  var isAnswered = props.state.isAnswered;\n  var input = props.state.input;\n  var answer = props.question.answer;\n  var type = props.question.type;\n\n  if (type === \"radio\" || type === \"checkbox\") {\n    inputEl = (\n      <Choices\n        choices={choices}\n        onChange={onChange}\n        isAnswered={isAnswered}\n        input={input}\n        answer={answer}\n        type={type}\n      />\n    );\n  } else if (type === \"text\") {\n    inputEl = (\n      <TextBox\n        onChange={onChange}\n        isAnswered={isAnswered}\n        input={input}\n        answer={answer}\n        type={type}\n      />\n    );\n  }\n\n  return inputEl;\n}\n\nfunction Result(props) {\n  var variant = props.isCorrect ? \"success\" : \"danger\";\n  var headMsg = props.isCorrect ? \"正解！\" : \"不正解！ｗ\";\n\n  return (\n    <>\n      <Alert variant={variant} show={props.show} transition={Collapse}>\n        <Alert.Heading>{headMsg}</Alert.Heading>\n        <hr />\n        <p className=\"mb-0\">{props.commentary}</p>\n      </Alert>\n    </>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: null,\n      isAnswered: false,\n      isCorrect: false,\n      questionNum: 0\n    };\n    this.file_json = require(\"./question01.json\");\n    this.question = this.file_json.questions[this.state.questionNum];\n  }\n\n  changeInput(i) {\n    var input = i;\n\n    // 配列はソートする\n    if (Array.isArray(input)) {\n      input.sort();\n    }\n\n    this.setState({\n      input: input\n    });\n  }\n\n  clickOK(e) {\n    if (!this.state.isAnswered) {\n      // 答え合わせ\n      this.setState({\n        isAnswered: true,\n        isCorrect:\n          JSON.stringify(this.state.input) ===\n          JSON.stringify(this.question.answer)\n      });\n    } else {\n      // 次の問題へ\n\n      var questionNum = this.state.questionNum + 1;\n      if (questionNum >= this.file_json.questions.length) {\n        questionNum = 0;\n      }\n\n      this.setState({\n        input: null,\n        isAnswered: false,\n        questionNum: questionNum\n      });\n      this.question = this.file_json.questions[questionNum];\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <h1 className=\"header\">{this.file_json.section}</h1>\n\n        <Question value={this.question.sentence} />\n\n        <UserInput\n          onChange={(i) => this.changeInput(i)}\n          state={this.state}\n          question={this.question}\n        />\n\n        <Result\n          isCorrect={this.state.isCorrect}\n          commentary={this.question.commentary}\n          show={this.state.isAnswered}\n        />\n\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          block\n          className=\"mt-4\"\n          onClick={(i) => this.clickOK(i)}\n          disabled={this.state.input == null}\n        >\n          {this.state.isAnswered ? \"次へ\" : \"決定\"}\n        </Button>\n      </>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <Container>\n      <Game />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}